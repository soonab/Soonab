openapi: 3.1.0
info:
  title: Alinkah API
  version: 1.0.0
  description: >
    Chronological, no-ranking social MVP for Alinkah. Public endpoints for posts, replies, reporting;
    key-gated admin moderation actions. Step-9 adds cursor pagination for posts and replies.

servers:
  - url: http://localhost:3000
    description: Local dev
  - url: https://{host}
    description: Deployed host
    variables:
      host:
        default: example.com

tags:
  - name: Posts
  - name: Replies
  - name: Reports
  - name: Admin
  - name: Auth
  - name: Ops

paths:
  /api/health:
    get:
      tags: [Ops]
      summary: Service health
      responses:
        '200': { description: OK }
        '503': { description: DB unreachable }

  /api/csp-report:
    post:
      tags: [Ops]
      summary: CSP violation report (report-only)
      responses:
        '200': { description: OK }

  /api/posts:
    get:
      tags: [Posts]
      summary: List PUBLIC posts (paginated, newest-first)
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
        - in: query
          name: cursor
          schema: { type: string, nullable: true, description: Base64URL cursor from previous page }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostsResponse'
    post:
      tags: [Posts]
      summary: Create a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePostResponse'
        '400': { description: Bad request }
        '403': { description: Forbidden (moderation penalty) }
        '429': { description: Rate or quota limit }

  /api/posts/{id}/replies:
    get:
      tags: [Replies]
      summary: List replies for a post (paginated, ascending)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: cursor
          schema: { type: string, nullable: true, description: Base64URL cursor from previous page }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRepliesResponse'
    post:
      tags: [Replies]
      summary: Create a reply (PUBLIC only for now)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReplyRequest'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateReplyResponse'
        '400': { description: Bad request }
        '403': { description: Forbidden (moderation penalty) }
        '404': { description: Parent post not found }
        '429': { description: Rate or quota limit }

  /api/report:
    post:
      tags: [Reports]
      summary: Submit a moderation report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReportRequest'
      responses:
        '200': { description: Accepted }
        '400': { description: Bad request }

  /api/admin/moderation/action:
    post:
      tags: [Admin]
      summary: Admin â€” moderation action (hide/unhide/remove/block/unblock)
      parameters:
        - in: query
          name: key
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminModerationActionRequest'
      responses:
        '200': { description: OK }
        '400': { description: Bad request }
        '403': { description: Forbidden (missing/invalid admin key) }

  /api/auth/google:
    get:
      tags: [Auth]
      summary: Begin Google OAuth (PKCE)
      parameters:
        - in: query
          name: redirect
          schema: { type: string, description: "path-only redirect (same-origin)" }
      responses:
        '302': { description: Redirect to Google }

  /api/auth/google/callback:
    get:
      tags: [Auth]
      summary: Google OAuth callback (code exchange)
      responses:
        '302': { description: Redirect to app }

  /api/auth/signout:
    post:
      tags: [Auth]
      summary: Sign out current user (clear auth cookie)
      responses:
        '200': { description: OK }

components:
  schemas:
    # --- Enums ---
    Visibility:
      type: string
      enum: [PUBLIC, FOLLOWERS, TRUSTED]

    ContentState:
      type: string
      enum: [ACTIVE, HIDDEN, REMOVED]

    ReportTarget:
      type: string
      enum: [POST, REPLY]

    ModerationActionType:
      type: string
      enum: [HIDE, UNHIDE, REMOVE, BLOCK_PROFILE, UNBLOCK_PROFILE]

    ModerationTarget:
      type: string
      enum: [POST, REPLY, PROFILE]

    # --- Core objects ---
    Post:
      type: object
      properties:
        id: { type: string }
        sessionId:
          type: string
          nullable: true
        profileId:
          type: string
          nullable: true
        body: { type: string }
        createdAt: { type: string, format: date-time }
        visibility: { $ref: '#/components/schemas/Visibility' }
        state: { $ref: '#/components/schemas/ContentState' }

    Reply:
      type: object
      properties:
        id: { type: string }
        postId: { type: string }
        sessionId:
          type: string
          nullable: true
        profileId:
          type: string
          nullable: true
        body: { type: string }
        createdAt: { type: string, format: date-time }
        visibility: { $ref: '#/components/schemas/Visibility' }
        state: { $ref: '#/components/schemas/ContentState' }

    ModerationReport:
      type: object
      properties:
        id: { type: string }
        sessionId:
          type: string
          nullable: true
        targetType: { $ref: '#/components/schemas/ReportTarget' }
        targetId: { type: string }
        reason:
          type: string
          nullable: true
        createdAt: { type: string, format: date-time }

    ModerationAction:
      type: object
      properties:
        id: { type: string }
        actor: { type: string }
        targetType: { $ref: '#/components/schemas/ModerationTarget' }
        targetId:
          type: string
          nullable: true
        profileId:
          type: string
          nullable: true
        action: { $ref: '#/components/schemas/ModerationActionType' }
        reason:
          type: string
          nullable: true
        createdAt: { type: string, format: date-time }

    # --- Requests & Responses ---
    CreatePostRequest:
      type: object
      required: [body]
      properties:
        body:
          type: string
          maxLength: 500
        visibility:
          $ref: '#/components/schemas/Visibility'

    CreatePostResponse:
      type: object
      properties:
        ok: { type: boolean }
        post: { $ref: '#/components/schemas/Post' }
        hashtags:
          type: array
          items: { type: string }
        quota:
          nullable: true
          oneOf:
            - type: integer
            - type: 'null'

    CreateReplyRequest:
      type: object
      required: [body]
      properties:
        body:
          type: string
          maxLength: 500

    CreateReplyResponse:
      type: object
      properties:
        ok: { type: boolean }
        reply: { $ref: '#/components/schemas/Reply' }
        quota:
          nullable: true
          oneOf:
            - type: integer
            - type: 'null'

    CreateReportRequest:
      type: object
      required: [targetType, targetId]
      properties:
        targetType: { $ref: '#/components/schemas/ReportTarget' }
        targetId: { type: string }
        reason: { type: string }

    PaginatedPostsResponse:
      type: object
      properties:
        ok: { type: boolean }
        items:
          type: array
          items: { $ref: '#/components/schemas/Post' }
        posts:
          description: Back-compat: same as items (deprecated)
          type: array
          items: { $ref: '#/components/schemas/Post' }
        nextCursor:
          type: string
          nullable: true

    PaginatedRepliesResponse:
      type: object
      properties:
        ok: { type: boolean }
        items:
          type: array
          items: { $ref: '#/components/schemas/Reply' }
        nextCursor:
          type: string
          nullable: true
